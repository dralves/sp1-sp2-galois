if(HAVE_BIG_ENDIAN)
  set(ROME ${CMAKE_SOURCE_DIR}/inputs/structured/rome99.big.gr)
  set(SROME ${CMAKE_SOURCE_DIR}/inputs/structured/srome99.big.gr)
else()
  set(ROME ${CMAKE_SOURCE_DIR}/inputs/structured/rome99.gr)
  set(SROME ${CMAKE_SOURCE_DIR}/inputs/structured/srome99.gr)
endif()
set(BASE ${CMAKE_SOURCE_DIR})

# Linking against the Boost libs via target_link_libraries
# can result in LLVM headers installed alongside Boost
# taking precedence over our vendored ones.
# avoid this by putting our vendored LLVM include paths
# first when compiling the executables that use them.
include_directories(BEFORE
  ${CMAKE_SOURCE_DIR}/libllvm/include
  ${CMAKE_CURRENT_BINARY_DIR}/../libllvm/include
)

makeTest(ADD_TARGET acquire DISTSAFE)
makeTest(ADD_TARGET bandwidth)
makeTest(ADD_TARGET barriers)
makeTest(ADD_TARGET deterministic ${ROME})
makeTest(ADD_TARGET empty-member-lcgraph DISTSAFE)
makeTest(ADD_TARGET oneach)
makeTest(ADD_TARGET filegraph DISTSAFE ${ROME})
makeTest(ADD_TARGET flatmap DISTSAFE EXP_OPT)
makeTest(ADD_TARGET forward-declare-graph DISTSAFE)
makeTest(ADD_TARGET foreach)
makeTest(ADD_TARGET gcollections DISTSAFE)
makeTest(ADD_TARGET graph-compile DISTSAFE)
makeTest(ADD_TARGET gslist)
makeTest(ADD_TARGET graph)
#makeTest(ADD_TARGET layergraph)
makeTest(ADD_TARGET lc-adaptor DISTSAFE)
makeTest(ADD_TARGET lock DISTSAFE)
makeTest(ADD_TARGET loop-overhead REQUIRES OPENMP_FOUND DISTSAFE)
makeTest(ADD_TARGET mem DISTSAFE)
makeTest(ADD_TARGET move DISTSAFE EXP_OPT)
makeTest(ADD_TARGET pc DISTSAFE)
#makeTest(ADD_TARGET sched DISTSAFE EXP_OPT)
makeTest(ADD_TARGET sort)
makeTest(ADD_TARGET static DISTSAFE)
makeTest(ADD_TARGET twoleveliteratora DISTSAFE)
makeTest(ADD_TARGET wakeup-overhead)
makeTest(ADD_TARGET worklists-compile DISTSAFE)
makeTest(ADD_TARGET floatingPointErrors)
makeTest(ADD_TARGET hwtopo DISTSAFE)
makeTest(ADD_TARGET morphgraph)
makeTest(ADD_TARGET papi)

#makeTest(TARGET lonestar/avi/AVIodgExplicitNoLock -n 0 -d 2 -f "${BASE}/inputs/avi/squareCoarse.NEU.gz")
makeTest(TARGET lonestar/barneshut/barneshut -n 1000 -steps 1 -seed 0)
makeTest(TARGET lonestar/betweennesscentrality/betweennesscentrality-outer "${BASE}/inputs/structured/torus5.gr" -forceVerify)
makeTest(TARGET lonestar/bfs/bfs "${ROME}")
makeTest(TARGET lonestar/boruvka/boruvka "${ROME}")
#makeTest(TARGET lonestar/clustering/clustering -numPoints 1000)
makeTest(TARGET lonestar/delaunayrefinement/delaunayrefinement "${BASE}/inputs/meshes/r10k.1")
makeTest(TARGET lonestar/delaunaytriangulation/delaunaytriangulation "${BASE}/inputs/meshes/r10k.node")
#makeTest(TARGET lonestar/des/DESunordered "${BASE}/inputs/des/multTree6bit.net")
makeTest(TARGET lonestar/gmetis/gmetis "${ROME}" 4)
#makeTest(TARGET lonestar/kruskal/KruskalHand "${ROME}")
makeTest(TARGET lonestar/independentset/independentset "${ROME}")
makeTest(TARGET lonestar/matching/bipartite-mcm -inputType generated -n 100 -numEdges 1000 -numGroups 10 -seed 0)
makeTest(TARGET lonestar/preflowpush/preflowpush "${SROME}" 0 100)
makeTest(TARGET lonestar/sssp/sssp "${ROME}")
makeTest(TARGET lonestar/surveypropagation/surveypropagation 9 100 300 3)
makeTest(TARGET lonestar/tutorial_examples/example-hello-world 2 10)
makeTest(TARGET lonestar/tutorial_examples/example-torus 2 100)
makeTest(TARGET lonestar/tutorial_examples/example-torus-improved 2 100)
